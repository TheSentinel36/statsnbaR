# Purpose is to provide a "layer" between the names that stats.nba.com uses
# and the names used in the code, so that if stats.nba.com changes their
# naming then only this file needs to be changed in the package.
# 
# Manually recorded from stats.nba.com
# 
# Stephen Wade
# 26/02/2016

host : "http://stats.nba.com/"

filters  :
    &league league :
        class   : character
        mapping : {
            NBA      : "00",    # NBA
            D-league : "20"     # D-League
            }
        default : NBA
    &only_current only_current :
        class   : numeric
        mapping : {
            FALSE : 0,
            TRUE  : 1
            }
        default : FALSE
    &season season :
        class   : api_season   # YYYY-YY+1
        default : 2015
    &college college :
        class : character
        mapping : {
            all : NULL
        }
        default : all
    &conference conference :
        class   : character
        mapping : {
            both : NULL,
            east : "East",
            west : "West"
            }
        default : both
    &country country :
        class   : character
        default : NULL
    &date_from date_from :
        class   : api_date    # MM/DD/YYYY
        default : NULL
    &date_to date_to :
        class   : api_date    # MM/DD/YYYY
        default : NULL
    &division division : 
        class   : character
        mapping : {
            all        : NULL,
            atlantic   : "Atlantic",
            central    : "Central",
            north_west : "Northwest",
            pacific    : "Pacific",
            south_east : "Southeast",
            south_west : "Southwest"
            }
        default : all
    &draft_pick draft_pick :
        class   : character
        mapping : {
            all          : NULL,
            first_round  : "1st Round",
            second_round : "2nd Round",
            first_pick   : "1st Pick",
            lottery      : "Lottery Pick",
            #top_five    : "Top 5 Pick",
            #top_ten     : "Top 10 Pick",
            #top_fifteen : "Top 15 Pick",
            #top_twenty  : "Top 20 Pick",
            #second_ten  : "Picks 11 Thru 20",
            #second_ten  : "Picks 21 Thru 30",
            undrafted    : "Undrafted"
            }
        default : all
    &draft_year draft_year :
        class   : integer
        default : NULL
    &game_scope game_scope :
        class   : character
        default : NULL
    &game_segment game_segment :
        class   : character
        mapping : {
            full_game   : NULL,
            first_half  : "First Half",
            second_half : "Second Half",
            overtime    : "Overtime"
            }
        default : full_game
    &height_segment height_segment :
        class   : character
        mapping : {
            all           : NULL,
            lt_six        : "LT 6-0",
            gte_six       : "GT 6-0",
            lt_six_four   : "LT 6-4",
            gte_six_four  : "GT 6-4",
            lt_six_seven  : "LT 6-7",
            gte_six_seven : "GT 6-7",
            lt_six_ten    : "LT 6-10",
            gte_six_ten   : "GT 6-10",
            lt_seven      : "LT 7-0",
            gte_seven     : "GT 7-0"
            }
        default : all
    &last_n last_n :
        class   : integer
        default : 0
    &location location :
        class   : character
        mapping : {
            all  : NULL,
            home : "Home",
            away : "Away"
            }
        default: all
    &measurement measurement :
        class : character
        mapping : {
            base          : "Base",
            advanced      : "Advanced",
            miscellaneous : "Misc",
            scoring       : "Scoring",
            usage         : "Usage",
            opponent      : "Opponent"
            }
        default : base
    &month month :
        class   : integer
        mapping : {
            all : 0,
            oct : 1,
            nov : 2,
            dec : 3,
            jan : 4,
            feb : 5,
            mar : 6,
            apr : 7,
            may : 8,
            jun : 9,
            jul : 10,
            aug : 11,
            sep : 12
            }
        default : all
    &opponent_team opponent_team : 
        class   : integer
        default : 0
    &win_loss win_loss :
        class   : character
        mapping : {
            all  : NULL,
            win  : "W",
            loss : "L"
            }
        default : all
    &playoff_round playoff_round : 
        class   : integer
        default : 0
    &pace_adjust pace_adjust :
        class   : character
        mapping : {
            FALSE : "N",
            TRUE  : "Y"
            }
        default : FALSE
    &per per : 
        class : character
        mapping : {
            total           : "Totals",
            game            : "PerGame",
            possessions_100 : "Per100Possessions",
            plays_100       : "Per100Plays",
            possession      : "PerPossession",
            play            : "PerPlay",
            minute          : "PerMinute",
            minutes_48      : "Per48",
            minutes_40      : "Per40",
            minutes_36      : "Per36",
            inverse_minutes : "MinutesPer"
            }
        default : total
    &period period :
        class   : integer
        default : 0
    &experience experience :
        class : character
        mapping : {
            all       : NULL,
            rookie    : "Rookie",
            sophomore : "Sophomore",
            veteran   : "Veteran"
            }
        default : all
    &position position :
        class : character
        mapping : {
            all     : NULL,
            center  : "C",
            forward : "F",
            guard   : "G"
            }
        default : all
    &plus_minus plus_minus :    # Differentials on/off
        class   : character
        mapping : {
            FALSE : "N",
            TRUE  : "Y"
            }
        default : FALSE
    &rank rank :
        class : character
        mapping : {
            TRUE  : "Y",
            FALSE : "N"
            } 
        default : FALSE
    &season_segment season_segment :
        class   : character
        mapping : {
            all          : NULL,
            pre_allstar  : "Pre All-Star",
            post_allstar : "Post All-Star"
            }
        default : all
    &season_type season_type : 
        class   : character
        mapping : {
            allstar   : "All Star",
            playoff   : "Playoffs",
            regular   : "Regular Season",
            preseason : "Pre Season"
            }
        default : regular
    &shot_clock shot_clock :
        class   : character
        mapping : {
            all         : NULL,
            super_early : "24-22",
            very_early  : "22-18 Very Early",
            early       : "18-15 Early",
            average     : "15-7 Average",
            late        : "7-4 Late",
            very_late   : "4-0 Very Late",
            off         : "ShotClock Off"
            }
        default : all
    &starting_status starting_status :
        class : character
        mapping : {
            all     : NULL,
            bench   : "Bench",
            starter : "Starters"
            }
        default : all
    &team_id team_id :
        class   : integer
        default : 0
    &opponent_conference  opponent_conference :
        class   : character
        mapping : {
            both : NULL,
            east : "East",
            west : "West"
            }
        default : both
    &opponent_division opponent_division : 
        class   : character
        mapping : {
            all        : NULL,
            atlantic   : "Atlantic",
            central    : "Central",
            north_west : "Northwest",
            pacific    : "Pacific",
            south_east : "Southeast",
            south_west : "Southwest"
            }
        default : all
    &weight_segment weight_segment :
        class   : character
        mapping : {
            all : NULL,
            lt_200  : "LT 200",
            gte_200 : "GT 200",
            lt_225  : "LT 225",
            gte_225 : "GT 225",
            lt_250  : "LT 250",
            gte_250 : "GT 250",
            lt_275  : "LT 275",
            gte_275 : "GT 275",
            lt_300  : "LT 300",
            gte_300 : "GT 300",
            }
        default : all
    &clutch_time clutch_time :
        class   : character
        mapping : {
            300 : "Last 5 Minutes",
            240 : "Last 4 Minutes",
            180 : "Last 3 Minutes",
            120 : "Last 2 Minutes",
            60  : "Last 1 Minute",
            30  : "Last 30 Seconds",
            10  : "Last 10 Seconds"
            }
        default : 300
    &point_diff point_diff :
        class   : integer
        default : 5
    &lead lead :
        class   : character
        mapping : {
            any    :  "Ahead or Behind",
            behind : "Behind or Tied",
            ahead  : "Ahead or Tied"
            }
        default : any

data    :
    &person_id person_id :
        class   : numeric
    &first_name first_name :
        class   : first_name
    &last_name last_name :
        class   : last_name
    &active roster_status :
        class   : logical
        mapping : {
            0 : FALSE,    # not active
            1 : TRUE      # active player
            }
    &year_start year_start :
        class   : integer
    &year_end year_end :
        class   : integer
    &team_id team_id :
        class   : numeric
    &team_city team_city :
        class   : character
    &team_name team_name :
        class   : character
    &team_abbr team_abbr :
        class   : character
    &has_played has_played :
        class   : logical
        mapping : {
            'Y' : TRUE,    # played
            'N' : FALSE    # never played
            }
    &player_name player_name :
        class : character
    &age age :
        class   : integer
    &games games :
        class   : integer
    &win win :
        class   : integer
    &loss loss :
        class   : integer
    &mins mins :
        class   : numeric
    &fgm fgm :
        class   : numeric
    &fga fga :
        class   : numeric
    &fg3m fg3m :
        class   : numeric
    &fg3a fg3a :
        class   : numeric
    &ftm ftm :
        class   : numeric
    &fta fta :
        class   : numeric
    &o_boards offensive_boards :
        class   : numeric
    &d_boards defensive_boards :
        class   : numeric
    &boards boards :
        class   : numeric
    &assists assists :
        class   : numeric
    &turnovers turnovers :
        class   : numeric
    &steals steals :
        class   : numeric
    &blocks blocks :
        class   : numeric
    &block_against block_against :
        class   : numeric
    &fouls fouls :
        class   : numeric
    &fouls_drawn fouls_drawn :
        class   : numeric
    &points points :
        class   : numeric
    &plus_minus plus_minus :
        class   : numeric
    &double_double double_double :
        class   : numeric
    &triple_double triple_double :
        class   : numeric
    &o_rating offensive_rating :
        class   : numeric
    &d_rating defensive_rating :
        class   : numeric
    &net_rating net_rating :
        class   : numeric
    &assist_percent assist_percent :
        class   : numeric
    &assist_turnover assist_turnover :
        class   : numeric
    &assist_rate assist_rate :
        class   : numeric
    &o_board_percent offensive_boards_percent :
        class   : numeric
    &d_board_percent defensive_boards_percent :
        class   : numeric
    &board_percent board_percent :
        class   : numeric
    &turnover_rate turnover_rate :
        class   : numeric
    &efg_percent EFG_percent :
        class   : numeric
    &ts_percent true_shooting_percent :
        class   : numeric
    &usage_percent usage_percent :
        class   : numeric
    &pace pace :
        class   : numeric
    &pie PIE :
        class   : numeric
    &points_off_TO points_off_TO :
        class   : numeric
    &points_sec_chance points_sec_chance :
        class   : numeric
    &points_fast_break points_fast_break :
        class   : numeric
    &points_in_paint points_in_paint :
        class   : numeric
    &opp_points_off_TO opp_points_off_TO :
        class   : numeric
    &opp_points_sec_chance opp_points_sec_chance :
        class   : numeric
    &opp_points_fast_break opp_points_fast_break :
        class   : numeric
    &opp_points_in_paint  opp_points_in_paint :
        class   : numeric 
    &fg2a_percent fg2a_percent :
        class   : numeric 
    &fg3a_percent fg3a_percent :
        class   : numeric 
    &pts2_percent pts2_percent :
        class   : numeric 
    &pts2_midrange_percent pts2_midrange_percent :
        class   : numeric 
    &pts3_percent pts3_percent :
        class   : numeric 
    &pts_fastbreak_percent pts_fastbreak_percent :
        class   : numeric 
    &pts_freethrow_percent pts_freethrow_percent :
        class   : numeric 
    &pts_off_TO_percent pts_off_TO_percent :
        class   : numeric 
    &pts_paint_percent pts_paint_percent :
        class   : numeric 
    &pts2m_assist_percent pts2m_assist_percent :
        class   : numeric 
    &pts3m_assist_percent pts3m_assist_percent :
        class   : numeric 
    &fgm_assist_percent fgm_assist_percent :
        class   : numeric
    &fgm_usage fgm_usage :
        class   : numeric
    &fga_usage fga_usage :
        class   : numeric
    &fg3m_usage fg3m_usage :
        class   : numeric
    &fg3a_usage fg3a_usage :
        class   : numeric
    &ftm_usage ftm_usage :
        class   : numeric
    &fta_usage fta_usage :
        class   : numeric
    &o_board_usage o_board_usage :
        class   : numeric
    &d_board_usage d_board_usage :
        class   : numeric
    &board_usage board_usage :
        class   : numeric
    &assist_usage assist_usage :
        class   : numeric
    &TO_usage TO_usage :
        class   : numeric
    &steal_usage steal_usage :
        class   : numeric
    &block_usage block_usage :
        class   : numeric
    &block_against_usage block_against_usage :
        class   : numeric
    &fouls_usage fouls_usage :
        class   : numeric
    &fouls_drawn_usage fouls_drawn_usage :
        class   : numeric
    &points_usage points_usage :
        class   : numeric

# helpful search + replace regex
# ([ ]*)\*([A-Za-z0-9_]+)[ ]+:.+
# \1&\2 \2 :\n        class   : numeric
              
endpoints :
    player_registry :
        api.name     : "commonallplayers"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/players"
        api.filters  :
            *league       : "LeagueID"
            *only_current : "IsOnlyCurrentSeason"
            *season       : "Season"
        api.results :
            CommonAllPlayers : {
                *person_id    : "person_id",
                *first_name   : "display_last_comma_first",
                *last_name    : "display_last_comma_first",
                *active       : "rosterstatus",
                *year_start   : "from_year",
                *year_end     : "to_year",
                *team_id      : "team_id",
                *team_city    : "team_city",
                *team_name    : "team_name",
                *team_abbr    : "team_abbreviation",
                *has_played   : "games_played_flag",
                }
    per_player_base :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : &ldps_input {
            *college             : "College",
            *conference          : "Conference",
            *country             : "Country",
            *date_from           : "DateFrom",
            *date_to             : "DateTo",
            *division            : "Division",
            *draft_pick          : "DraftPick",
            *draft_year          : "DraftYear",
            *game_scope          : "GameScope",
            *game_segment        : "GameSegment",
            *height_segment      : "Height",
            *last_n              : "LastNGames",
            *league              : "LeagueID",
            *location            : "Location",
            *measurement         : "MeasureType",
            *month               : "Month",
            *opponent_team       : "OpponentTeamID",
            *win_loss            : "Outcome",
            *playoff_round       : "PORound",
            *pace_adjust         : "PaceAdjust",
            *per                 : "PerMode",
            *period              : "Period",
            *experience          : "PlayerExperience",
            *position            : "PlayerPosition",
            *plus_minus          : "PlusMinus",
            *rank                : "Rank",
            *season              : "Season",
            *season_segment      : "SeasonSegment",
            *season_type         : "SeasonType",
            *shot_clock          : "ShotClockRange",
            *starting_status     : "StarterBench",
            *team_id             : "TeamID",
            *opponent_conference : "VsConference",
            *opponent_division   : "VsDivision",
            *weight_segment      : "Weight"
            }
        api.results :
            LeagueDashPlayerStats : &pp_base_results {
                *person_id      : "player_id",
                *player_name    : "player_name",
                *team_id        : "team_id",
                *team_abbr      : "team_abbreviation",
                *age            : "age",
                *games          : "gp",
                *win            : "w",
                *loss           : "l",
                *mins           : "min",
                *fgm            : "fgm",
                *fga            : "fga",
                *fg3m           : "fg3m",
                *fg3a           : "fg3a",
                *ftm            : "ftm",
                *fta            : "fta",
                *o_boards       : "oreb",
                *d_boards       : "dreb",
                *boards         : "reb",
                *assists        : "ast",
                *turnovers      : "tov",
                *steals         : "stl",
                *blocks         : "blk",
                *block_against  : "blka",
                *fouls          : "pf",
                *fouls_drawn    : "pfd",
                *points         : "pts",
                *plus_minus     : "plus_minus",
                *double_double  : "dd2",
                *triple_double  : "td3"
                }
    per_player_advanced :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_input
        api.results  :
            LeagueDashPlayerStats : &pp_advanced_results {
                *person_id       : "player_id",
                *player_name     : "player_name",
                *team_id         : "team_id",
                *team_abbr       : "team_abbreviation",
                *age             : "age",
                *games           : "gp",
                *win             : "w",
                *loss            : "l",
                *mins            : "min",
                *o_rating        : "off_rating",
                *d_rating        : "def_rating",
                *net_rating      : "net_rating",
                *assist_percent  : "ast_pct",
                *assist_turnover : "ast_to",
                *assist_rate     : "ast_ratio",
                *o_board_percent : "oreb_pct",
                *d_board_percent : "dreb_pct",
                *board_percent   : "reb_pct",
                *turnover_rate   : "tm_tov_pct",
                *efg_percent     : "efg_pct",
                *ts_percent      : "ts_pct",
                *usage_percent   : "usg_pct",
                *pace            : "pace",
                *pie             : "pie",
                }
    per_player_miscellaneous :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_input
        api.results  :
            LeagueDashPlayerStats : &pp_misc_results {
                *person_id             : "player_id",
                *player_name           : "player_name",
                *team_id               : "team_id",
                *team_abbr             : "team_abbreviation",
                *age                   : "age",
                *games                 : "gp",
                *win                   : "w",
                *loss                  : "l",
                *mins                  : "min",
                *points_off_TO         : "pts_off_tov",
                *points_sec_chance     : "pts_2nd_chance",
                *points_fast_break     : "pts_fb",
                *points_in_paint       : "pts_paint",
                *opp_points_off_TO     : "opp_pts_off_tov",
                *opp_points_sec_chance : "opp_pts_2nd_chance",
                *opp_points_fast_break : "opp_pts_fb",
                *opp_points_in_paint   : "opp_pts_paint",
                *blocks                : "blk",
                *block_against         : "blka",
                *fouls                 : "pf",
                *fouls_drawn           : "pfd"
                }
    per_player_scoring :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_input
        api.results  :
            LeagueDashPlayerStats : &pp_scoring_results {
                *person_id             : "player_id",
                *player_name           : "player_name",
                *team_id               : "team_id",
                *team_abbr             : "team_abbreviation",
                *age                   : "age",
                *games                 : "gp",
                *win                   : "w",
                *loss                  : "l",
                *mins                  : "min",
                *fg2a_percent          : "pct_fga_2pt",
                *fg3a_percent          : "pct_fga_3pt",
                *pts2_percent          : "pct_pts_2pt",
                *pts2_midrange_percent : "pct_pts_2pt_mr",
                *pts3_percent          : "pct_pts_3pt",
                *pts_fastbreak_percent : "pct_pts_fb",
                *pts_freethrow_percent : "pct_pts_ft",
                *pts_off_TO_percent    : "pct_pts_off_tov",
                *pts_paint_percent     : "pct_pts_paint",
                *pts2m_assist_percent  : "pct_ast_2pm",
                *pts3m_assist_percent  : "pct_ast_3pm",
                *fgm_assist_percent    : "pct_ast_fgm"
                }
    per_player_usage :
        api.name     : "leaguedashplayerstats"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldps_input
        api.results  :
            LeagueDashPlayerStats : {
                *person_id           : "player_id",
                *player_name         : "player_name",
                *team_id             : "team_id",
                *team_abbr           : "team_abbreviation",
                *age                 : "age",
                *games               : "gp",
                *win                 : "w",
                *loss                : "l",
                *mins                : "min",
                *usage_percent       : "usg_pct",
                *fgm_usage           : "pct_fgm",
                *fga_usage           : "pct_fga",
                *fg3m_usage          : "pct_fg3m",
                *fg3a_usage          : "pct_fg3a",
                *ftm_usage           : "pct_ftm",
                *fta_usage           : "pct_fta",
                *o_board_usage       : "pct_oreb",
                *d_board_usage       : "pct_dreb",
                *board_usage         : "pct_reb",
                *assist_usage        : "pct_ast",
                *TO_usage            : "pct_tov",
                *steal_usage         : "pct_stl",
                *block_usage         : "pct_blk",
                *block_against_usage : "pct_blka",
                *fouls_usage         : "pct_pf",
                *fouls_drawn_usage   : "pct_pfd",
                *points_usage        : "pct_pts"
                }
    per_player_base_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : &ldpc_input {
            *clutch_time         : "ClutchTime",
            *college             : "College",
            *conference          : "Conference",
            *country             : "Country",
            *date_from           : "DateFrom",
            *date_to             : "DateTo",
            *division            : "Division",
            *draft_pick          : "DraftPick",
            *draft_year          : "DraftYear",
            *game_scope          : "GameScope",
            *game_segment        : "GameSegment",
            *height_segment      : "Height",
            *last_n              : "LastNGames",
            *lead                : "AheadBehind",
            *league              : "LeagueID",
            *location            : "Location",
            *measurement         : "MeasureType",
            *month               : "Month",
            *opponent_team       : "OpponentTeamID",
            *win_loss            : "Outcome",
            *playoff_round       : "PORound",
            *pace_adjust         : "PaceAdjust",
            *per                 : "PerMode",
            *period              : "Period",
            *point_diff          : "PointDiff",
            *experience          : "PlayerExperience",
            *position            : "PlayerPosition",
            *plus_minus          : "PlusMinus",
            *rank                : "Rank",
            *season              : "Season",
            *season_segment      : "SeasonSegment",
            *season_type         : "SeasonType",
            *shot_clock          : "ShotClockRange",
            *starting_status     : "StarterBench",
            *team_id             : "TeamID",
            *opponent_conference : "VsConference",
            *opponent_division   : "VsDivision",
            *weight_segment      : "Weight"
            }
        api.results :
            LeagueDashPlayerClutch : *pp_base_results
    per_player_advanced_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_input
        api.results :
            LeagueDashPlayerClutch : *pp_advanced_results
    per_player_miscellaneous_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_input
        api.results :
            LeagueDashPlayerClutch : *pp_misc_results
    per_player_scoring_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_input
        api.results :
            LeagueDashPlayerClutch : *pp_scoring_results
    per_player_usage_clutch :
        api.name     : "leaguedashplayerclutch"
        api.path     : "stats"
        api.referrer : "http://stats.nba.com/league/player/"
        api.filters  : *ldpc_input
        api.results :
            LeagueDashPlayerClutch : *pp_usage_results
